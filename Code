# 0. Start By Importing Libraries

import streamlit as st
from langchain.document_loaders.csv_loader import CSVLoader
from langchain.vectorstores import FAISS
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI
from langchain.chains import LLMChain

# 1. Vectorise the sales response csv data
loader = CSVLoader(file_path="/content/Example2.csv")
documents = loader.load()


# 2. Using OpenAIEmbedding >> Dont forget to update your own API Key
embeddings = OpenAIEmbeddings(openai_api_key="API KEY HERE")

db = FAISS.from_documents(documents, embeddings)


# 2. Function for similarity search


def retrieve_info(query):
    similar_response = db.similarity_search(query, k=3)

    page_contents_array = [doc.page_content for doc in similar_response]

    # print(page_contents_array)

    return page_contents_array


#3 Initialize ChatOpenAI with the API key

llm = ChatOpenAI(openai_api_key=openai_api_key, temperature=0, model="gpt-3.5-turbo-16k-0613")

template = """

Follow this rules when generating a response:

1/ Response should be very similar or even identical to the answer,
in terms of length, tone of voice, logical arguments, and other details.

2/ If the answers are irrelevant, then try to mimic the style of the answer to the question.

3/ Answers can be guiding steps or direct answers for the questions.

4/ DO NOT ANSWER QUESTIONS asked by the user which are OUT of the knowledge base !

Below is a question I received from the prospect:
{message}

Here is a list of answers of how we normally respond to prospects in similar scenarios:
{best_practice}

Please write the best response for this question:
"""

prompt = PromptTemplate(
    input_variables=["message", "best_practice"],
    template=template
)

chain = LLMChain(llm=llm, prompt=prompt)


# 4. Retrieval augmented generation
def generate_response(message):
    best_practice = retrieve_info(message)
    response = chain.run(message=message, best_practice=best_practice)
    return response


 # 5. Printing an exapmle answer
print(generate_response("QUESTION HERE ?"))


# 6. Generating answer as voice
from gtts import gTTS
import IPython.display as ipd

text = generate_response("Question")
tts = gTTS(text)
tts.save("output.mp3")
ipd.Audio("output.mp3")

